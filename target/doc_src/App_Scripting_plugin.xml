<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../docbook-xml-4.5/docbookx.dtd">
<appendix id="appendix.Scripts.inOmegaT">
  <title>Script<indexterm class="singular">
      <primary>Script</primary>
    </indexterm></title>

  <section>
    <title>Introduzione</title>

    <para>OmegaT consente di avviare script scritti in diversi linguaggi, all'interno di OmegaT.</para>
  </section>

  <section>
    <title>Uso</title>

    <para>Facendo clic su <guisubmenu>Strumenti &gt; </guisubmenu><guisubmenu>Azioni di script</guisubmenu> si apre la finestra di dialogo per le azioni:<screenshot> <screeninfo>Azioni di script</screeninfo> <mediaobject> <imageobject> <imagedata fileref="images/ScriptingDialog.png"/> </imageobject> </mediaobject> </screenshot></para>

    <para>La finestra delle Azioni di script consente di caricare uno script esistente all'interno dell'area di testo e avviarlo nel progetto attivo aperto. Per personalizzare le funzionalità di script, osservare la procedura seguente:</para>

    <itemizedlist>
      <listitem>
        <para>Caricare uno script all'interno dell'editor facendo clic sul suo nome nell'elenco contenuto nel pannello sinistro.</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Fare clic col destro su un pulsante da &quot;&lt;1&gt;&quot; a &quot;&lt;12&gt;&quot; nella parte inferiore del pannello e selezionare &quot;Aggiungi&quot;. Nell'esempio sopra, sono stati già aggiunti due script (posizione 1 e 2).</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Il clic sinistro sul numero farà avviare lo script selezionato. È possibile avviare le macro selezionate sia dal menu principale, sia tramite le voci all'interno del menu <guisubmenu>Strumenti</guisubmenu>, sia premendo <keycap> Ctrl+Alt+F#</keycap> (# 1 a 12).</para>
      </listitem>
    </itemizedlist>

    <para>Per impostazione predefinita, gli script vengono memorizzati nella cartella &quot;scripts&quot; che si trova nella cartella di installazione di OmegaT (quella in cui è presente il file OmegaT.jar).</para>

    <para>È possibile aggiungere i nuovi script in quella cartella, essi appariranno nell'elenco degli script disponibili all'interno della finestra Azioni di script.</para>

    <para>Si possono trovare alcuni script aggiuntivi qui: <ulink url="https://sourceforge.net/projects/omegatscripts/">OmegaT Scripts</ulink>
    </para>
  </section>

  <section>
    <title>Linguaggi delle azioni di script</title>

    <para>Sono stati implementati i seguenti linguaggi di script:</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis role="bold">Groovy</emphasis> (http://groovy.codehaus.org): è un linguaggio dinamico per la Java Virtual machine. Si basa sulle potenzialità Java ma contiene potenti funzioni aggiuntive ispirate da linguaggi come Python, Ruby e Smalltalk.</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para><emphasis role="bold">JavaScript</emphasis> (a volte abbreviato in JS, da non confondere con Java): è un linguaggio di script basato su un prototipo, dinamico, debolmente tipizzato e con funzioni di prima classe. È un linguaggio a paradigma multiplo, che supporta gli stili di programmazione funzionali, imperativi e orientati agli oggetti. Essendo il linguaggio che sta dietro programmi diffusi, come Firefox, è uno strumento di programmazione familiare e preferito nell'ambiente open source.</para>
        </listitem>
      </itemizedlist>Tutti i linguaggi hanno accesso al modello oggetti di OmegaT e con il progetto come oggetto primario. La seguente porzione di codice scritto in groovy, per esempio, esegue un'analisi di tutti i segmenti, all'interno di tutti i file del progetto attivo e, se esiste la traduzione, restituisce il testo di partenza e di arrivo del segmento:</para>

    <programlisting>    files = project.projectFiles;
    for (i in 0 ..&lt; files.size())
    {
        for (j in 0 ..&lt; files[i].entries.size())
        {
            currSegment = files[i].entries[j];
            if (project.getTranslationInfo(currSegment))
            {
                source = currSegment.getSrcText();
                target = project.getTranslationInfo(currSegment).translation;
                console.println(source + &quot; &gt;&gt;&gt;&gt; &quot; + target);
            }     
        }
    }</programlisting>
  </section>
</appendix>